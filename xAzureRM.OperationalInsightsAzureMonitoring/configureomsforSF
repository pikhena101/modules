<#
    This script will configure an Operations Management Suite workspace (aka Operational Insights workspace) to read Diagnostics from an Azure Storage account.

    It will enable all supported data types (currently Service Fabric Events, ETW Events and IIS Logs).

    It supports Resource Manager storage accounts.

    If you have more than one Azure Subscription, you will be prompted for the subscription to configure.

    If you have more than one OMS workspace you will be prompted for the workspace to configure.

    It will then look through your Service Fabric clusters, and configure your OMS workspace to read Diagnostics from storage accounts that are connected to that cluster and have diagnostics enabled.
    #>

try
{
    Get-AzureRMContext
}
catch [System.Management.Automation.PSInvalidOperationException]
{
    Add-AzureRmAccount
}

$validTables = "WADServiceFabric*EventTable", "WADETWEventTable"
function Select-Subscription {
      $subscription = ""
      $allSubscriptions = Get-AzureRmSubscription 
      switch ($allSubscriptions.Count) {
             0 {Write-Error "No Operations Management Suite workspaces found"}
             1 {return $allSubscriptions}
        default {
            $uiPrompt = "Enter the number corresponding to the Azure subscription you would like to work with.`n"

            $count = 1
            foreach ($subscription in $allSubscriptions) {
                $uiPrompt += "$count. " + $subscription.SubscriptionName + " (" + $subscription.SubscriptionId + ")`n"
                $count++
            }
            $answer = (Read-Host -Prompt $uiPrompt) - 1
            $subscription = $allSubscriptions[$answer]
             Write-Host $subscription.SubscriptionId
        }  
    }

    return $subscription

}

function Select-Workspace {

    $workspace = ""
      
    $allWorkspaces = Get-AzureRmOperationalInsightsWorkspace  

    switch ($allWorkspaces.Count) {
        0 {Write-Error "No Operations Management Suite workspaces found. `n"}
        1 {return $allWorkspaces}
        default {
            $uiPrompt = "Enter the number corresponding to the workspace you want to configure.`n"
      
            $count = 1
            foreach ($workspace in $allWorkspaces) {
                $uiPrompt += "$count. " + $workspace.Name + " (" + $workspace.CustomerId + ")`n"
                $count++
            }
            $answer = (Read-Host -Prompt $uiPrompt) - 1
            $workspace = $allWorkspaces[$answer]
             Write-Host $workspace.WorkspaceName
        }  
    }
    return $workspace
}

function Check-ETWProviderLogging { 
     param( 
     [string]$id, 
     [string]$provider, 
     [string]$expectedTable, 
     [string]$table 
    )       
         Write-Debug ("ID: $id Provider: $provider ExpectedTable $expectedTable ActualTable $table") 
         if ( ($table -eq $null) -or ($table -eq ""))  
         { 
             Write-Warning ("$id No configuration found for $provider. Configure Azure diagnostics to write to $expectedTable.") 
         }  
         elseif ( $table -ne $expectedTable ) 
         { 
             Write-Warning ("$id $provider events are being written to $table instead of WAD$expectedTable. Events will not be collected by OMS") 
         }  
         else 
         { 
             Write-Verbose "$id $provider events are being written to WAD$expectedTable (Correct configuration.)" 
         } 
 } 

function Check-ServiceFabricScaleSetDiagnostics { 
     param( 
          [psobject]$scaleSetDiagnostics 
   ) 
 
 
     $storageAccountsFound = @() 
 
 
     Write-Verbose ("Checking " + $scaleSetDiagnostics) 
 
 
     $sfReliableActorTable = $null 
     $sfReliableServiceTable = $null 
     $sfOperationalTable = $null 
 
 
     Write-Debug $scaleSetDiagnostics 
 
 
     $serviceFabricProviderList = "" 
     $etwManifestProviderList = "" 
      
     if ( $scaleSetDiagnostics.xmlCfg )  
      { 
             Write-Debug ("Found XMLcfg") 
 
 
             $xmlCfg = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($scaleSetDiagnostics.xmlCfg)) 
 
 
             Write-Debug $xmlCfg 
 
 
             $etwProviders = Select-Xml -Content $xmlCfg -XPath "//EtwProviders"                 
 
 
             $serviceFabricProviderList = $etwProviders.Node.EtwEventSourceProviderConfiguration 
             $etwManifestProviderList = $etwProviders.Node.EtwManifestProviderConfiguration 
      } elseif ($scaleSetDiagnostics.WadCfg )  
     { 
         Write-Debug ("Found WADcfg") 
              
         Write-Debug $scaleSetDiagnostics.WadCfg 
 
 
         $serviceFabricProviderList = $scaleSetDiagnostics.WadCfg.DiagnosticMonitorConfiguration.EtwProviders.EtwEventSourceProviderConfiguration 
         $etwManifestProviderList = $scaleSetDiagnostics.WadCfg.DiagnosticMonitorConfiguration.EtwProviders.EtwManifestProviderConfiguration                                              
     } else 
     { 
         Write-Error "Unable to parse Azure Diagnostics setting for $id" 
             Write-Warning ("$id does not have diagnostics enabled") 
     } 
 
 
     foreach ($provider in $serviceFabricProviderList)  
     { 
         Write-Debug ("Event Source Provider: " + $provider.Provider + " Destination: " + $provider.DefaultEvents.eventDestination) 
         if ($provider.Provider -eq "Microsoft-ServiceFabric-Actors") 
         { 
             $sfReliableActorTable = $provider.DefaultEvents.eventDestination  
         } elseif ($provider.Provider -eq "Microsoft-ServiceFabric-Services")  
         {  
             $sfReliableServiceTable = $provider.DefaultEvents.eventDestination  
         } else  
         { 
             Check-ETWProviderLogging $id $provider.Provider "ETWEventTable" $provider.DefaultEvents.eventDestination 
         } 
     } 
     foreach ($provider in $etwManifestProviderList) 
     { 
         Write-Debug ("Manifest Provider: " + $provider.Provider + " Destination: " + $provider.DefaultEvents.eventDestination) 
         if ($provider.Provider -eq "cbd93bc2-71e5-4566-b3a7-595d8eeca6e8") 
         { 
             $sfOperationalTable = $provider.DefaultEvents.eventDestination  
         } else  
         { 
             Check-ETWProviderLogging $id $provider.Provider "ETWEventTable" $provider.DefaultEvents.eventDestination 
         } 
     } 
              
     Check-ETWProviderLogging $id "Microsoft-ServiceFabric-Actors" "ServiceFabricReliableActorEventTable" $sfReliableActorTable 
     Check-ETWProviderLogging $id "Microsoft-ServiceFabric-Services" "ServiceFabricReliableServiceEventTable" $sfReliableServiceTable 
     Check-ETWProviderLogging $id "cbd93bc2-71e5-4566-b3a7-595d8eeca6e8 (System events)" "ServiceFabricSystemEventTable" $sfOperationalTable 
              
     Write-Verbose ("StorageAccount: " + $scaleSetDiagnostics.StorageAccount) 
 
 
     $storageAccountsFound += ($scaleSetDiagnostics.StorageAccount) 
      
     return ($storageAccountsFound) 
 } 


function Select-StorageAccount {
    $allResources = Get-AzureRmResource #pulls in all resources
    $serviceFabricClusters = $allResources.Where({$_.ResourceType -eq "Microsoft.ServiceFabric/clusters"}) #pulls in all service fabric clusters in the resource
    $storageAccountList = @()
    foreach($cluster in $serviceFabricClusters) {
        Write-Host("Checking cluster: " + $cluster.Name)
       
         
         $scaleSet = $allResources.Where({($_.ResourceType -eq "Microsoft.Compute/virtualMachineScaleSets") -and ($_.ResourceGroupName -eq $cluster.ResourceGroupName)}) 

         foreach($set in $scaleSet) { 
             $resource = Get-AzureRmResource -ResourceId $set.ResourceId 
             $extensions = $resource.Properties.VirtualMachineProfile.ExtensionProfile.Extensions 
 
 
             foreach($ext in $extensions) { 
                 if ($ext.Properties.Publisher -eq "Microsoft.Azure.Diagnostics" -and $ext.Properties.Type -eq "IaaSDiagnostics") { 
                     $storageAccountList += (Check-ServiceFabricScaleSetDiagnostics $ext.Properties.Settings) 
                 } 
             }
          } 
        
         $storageAccountsToCheck = $allResources.Where({($_.ResourceType -eq "Microsoft.Storage/storageAccounts") -and ($_.ResourceName -in $storageAccountList)})

        
         if ($storageAccountsToCheck.Count -eq "0") {
        
                Write-Error "No storage accounts found"
           }
           else {
                    foreach ($storageAccount in $storageAccountsToCheck) {
                        Write-Host("Checking Storage Account: " + $storageAccount.Name)
                        $insightsName = $storageAccount.Name + $workspace.Name
                        $existingConfig = ""
                        try
                            {
                                $existingConfig = Get-AzureRmOperationalInsightsStorageInsight -Workspace $workspace -Name $insightsName -ErrorAction Stop

                            }
                        catch [Hyak.Common.CloudException]
                            {
                                # HTTP Not Found is returned if the storage insight doesn't exist
                            }
                        if ($existingConfig) {                         
                                  [array]$Tables = $existingConfig.Tables 
                                   foreach($table in $validTables) {
                                    
                                
                                         if($Tables -notcontains $table) {
                                               $Tables += $table
                                               $dirty = $true;
                                               Write-Host "Adding Table: $table";
                                         }
                                         else {
                                               Write-Host "$table is already configured.`n";
                                             }
                                      }
                                      # If any of the tables from the table list are not already monitored, then we add them
                                   if($dirty -eq $true) {
                                           Set-AzureRmOperationalInsightsStorageInsight -Workspace $workspace -Name $insightsName -Tables $Tables 
                                           Write-Host "Updating Storage Insight. `n"
                                    }
                                    else {
                                           Write-Host "Storage Insight already updated."
                                  }
                                 
                        
                          }
      
                     else {
                            $key = (Get-AzureRmStorageAccountKey -ResourceGroupName $storageAccount.ResourceGroupName -Name $storageAccount.Name).Key1
                           New-AzureRmOperationalInsightsStorageInsight -Workspace $workspace -Name $insightsName -StorageAccountResourceId $storageAccount.ResourceId -StorageAccountKey $key -Tables $validTables 
                       
                            Write-Host "New Azure Storage Insight Configured. 'n"
                        

                           }


                    }
            
             }
        
    

      }
      return

     }


    
$subscription = Select-Subscription
$subscriptionId = $subscription.SubscriptionId
$subscription = Select-AzureRmSubscription -SubscriptionId $subscriptionId
$workspace = Select-Workspace
$storageAccount = Select-StorageAccount
